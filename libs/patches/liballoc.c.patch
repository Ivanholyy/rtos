--- libs/liballoc/liballoc_1_1.c	2025-01-15 12:06:28.627115627 +0100
+++ src/kernel/memory/heap/liballoc.c	2025-01-15 19:34:51.597849979 +0100
@@ -1,4 +1,4 @@
-#include <liballoc.h>
+#include "liballoc.h"
 
 /**  Durand's Amazing Super Duper Memory functions.  */
 
@@ -48,11 +48,9 @@
 #define LIBALLOC_MAGIC	0xc001c0de
 #define LIBALLOC_DEAD	0xdeaddead
 
-#if defined DEBUG || defined INFO
+#if defined LIBALLOC_DEBUG || defined INFO
 #include <stdio.h>
-#include <stdlib.h>
-
-#define FLUSH()		fflush( stdout )
+// #include <stdlib.h>
 
 #endif
 
@@ -138,25 +136,25 @@
 }
  
 
-#if defined DEBUG || defined INFO
+#if defined LIBALLOC_DEBUG || defined INFO
 static void liballoc_dump()
 {
-#ifdef DEBUG
+#ifdef LIBALLOC_DEBUG
 	struct liballoc_major *maj = l_memRoot;
 	struct liballoc_minor *min = NULL;
 #endif
 
-	printf( "liballoc: ------ Memory data ---------------\n");
-	printf( "liballoc: System memory allocated: %i bytes\n", l_allocated );
-	printf( "liballoc: Memory in used (malloc'ed): %i bytes\n", l_inuse );
-	printf( "liballoc: Warning count: %i\n", l_warningCount );
-	printf( "liballoc: Error count: %i\n", l_errorCount );
-	printf( "liballoc: Possible overruns: %i\n", l_possibleOverruns );
+	debugf_debug( "liballoc: ------ Memory data ---------------\n");
+	debugf_debug( "liballoc: System memory allocated: %i bytes\n", l_allocated );
+	debugf_debug( "liballoc: Memory in used (malloc'ed): %i bytes\n", l_inuse );
+	debugf_debug( "liballoc: Warning count: %i\n", l_warningCount );
+	debugf_debug( "liballoc: Error count: %i\n", l_errorCount );
+	debugf_debug( "liballoc: Possible overruns: %i\n", l_possibleOverruns );
 
-#ifdef DEBUG
+#ifdef LIBALLOC_DEBUG
 		while ( maj != NULL )
 		{
-			printf( "liballoc: %x: total = %i, used = %i\n",
+			debugf_debug( "liballoc: %x: total = %i, used = %i\n",
 						maj, 
 						maj->size,
 						maj->usage );
@@ -164,7 +162,7 @@
 			min = maj->first;
 			while ( min != NULL )
 			{
-				printf( "liballoc:    %x: %i bytes\n",
+				debugf_debug( "liballoc:    %x: %i bytes\n",
 							min, 
 							min->size );
 				min = min->next;
@@ -174,7 +172,7 @@
 		}
 #endif
 
-	FLUSH();
+	
 }
 #endif
 
@@ -207,9 +205,9 @@
 		if ( maj == NULL ) 
 		{
 			l_warningCount += 1;
-			#if defined DEBUG || defined INFO
-			printf( "liballoc: WARNING: liballoc_alloc( %i ) return NULL\n", st );
-			FLUSH();
+			#if defined LIBALLOC_DEBUG || defined INFO
+			debugf_debug( "liballoc: WARNING: liballoc_alloc( %i ) return NULL\n", st );
+			
 			#endif
 			return NULL;	// uh oh, we ran out of memory.
 		}
@@ -223,11 +221,11 @@
 
 		l_allocated += maj->size;
 
-		#ifdef DEBUG
-		printf( "liballoc: Resource allocated %x of %i pages (%i bytes) for %i size.\n", maj, st, maj->size, size );
+		#ifdef LIBALLOC_DEBUG
+		debugf_debug( "liballoc: Resource allocated %x of %i pages (%i bytes) for %i size.\n", maj, st, maj->size, size );
 
-		printf( "liballoc: Total memory usage = %i KB\n",  (int)((l_allocated / (1024))) );
-		FLUSH();
+		debugf_debug( "liballoc: Total memory usage = %i KB\n",  (int)((l_allocated / (1024))) );
+		
 		#endif
 	
 		
@@ -262,10 +260,10 @@
 	if ( size == 0 )
 	{
 		l_warningCount += 1;
-		#if defined DEBUG || defined INFO
-		printf( "liballoc: WARNING: alloc( 0 ) called from %x\n",
+		#if defined LIBALLOC_DEBUG || defined INFO
+		debugf_debug( "liballoc: WARNING: alloc( 0 ) called from %x\n",
 							__builtin_return_address(0) );
-		FLUSH();
+		
 		#endif
 		liballoc_unlock();
 		return PREFIX(malloc)(1);
@@ -274,12 +272,11 @@
 
 	if ( l_memRoot == NULL )
 	{
-		#if defined DEBUG || defined INFO
-		#ifdef DEBUG
-		printf( "liballoc: initialization of liballoc " VERSION "\n" );
+		#if defined LIBALLOC_DEBUG || defined INFO
+		#ifdef LIBALLOC_DEBUG
+		debugf_debug( "liballoc: initialization of liballoc " VERSION "\n" );
 		#endif
-		atexit( liballoc_dump );
-		FLUSH();
+		
 		#endif
 			
 		// This is the first time we are being used.
@@ -287,25 +284,25 @@
 		if ( l_memRoot == NULL )
 		{
 		  liballoc_unlock();
-		  #ifdef DEBUG
-		  printf( "liballoc: initial l_memRoot initialization failed\n", p); 
-		  FLUSH();
+		  #ifdef LIBALLOC_DEBUG
+		  debugf_debug( "liballoc: initial l_memRoot initialization failed\n", p); 
+		  
 		  #endif
 		  return NULL;
 		}
 
-		#ifdef DEBUG
-		printf( "liballoc: set up first memory major %x\n", l_memRoot );
-		FLUSH();
+		#ifdef LIBALLOC_DEBUG
+		debugf_debug( "liballoc: set up first memory major %x\n", l_memRoot );
+		
 		#endif
 	}
 
 
-	#ifdef DEBUG
-	printf( "liballoc: %x PREFIX(malloc)( %i ): ", 
+	#ifdef LIBALLOC_DEBUG
+	debugf_debug( "liballoc: %x PREFIX(malloc)( %i ): ", 
 					__builtin_return_address(0),
 					size );
-	FLUSH();
+	
 	#endif
 
 	// Now we need to bounce through every major and find enough space....
@@ -343,9 +340,9 @@
 		// CASE 1:  There is not enough space in this major block.
 		if ( diff < (size + sizeof( struct liballoc_minor )) )
 		{
-			#ifdef DEBUG
-			printf( "CASE 1: Insufficient space in block %x\n", maj);
-			FLUSH();
+			#ifdef LIBALLOC_DEBUG
+			debugf_debug( "CASE 1: Insufficient space in block %x\n", maj);
+			
 			#endif
 				
 				// Another major block next to this one?
@@ -397,9 +394,9 @@
 
 			ALIGN( p );
 			
-			#ifdef DEBUG
-			printf( "CASE 2: returning %x\n", p); 
-			FLUSH();
+			#ifdef LIBALLOC_DEBUG
+			debugf_debug( "CASE 2: returning %x\n", p); 
+			
 			#endif
 			liballoc_unlock();		// release the lock
 			return p;
@@ -433,9 +430,9 @@
 			p = (void*)((uintptr_t)(maj->first) + sizeof( struct liballoc_minor ));
 			ALIGN( p );
 
-			#ifdef DEBUG
-			printf( "CASE 3: returning %x\n", p); 
-			FLUSH();
+			#ifdef LIBALLOC_DEBUG
+			debugf_debug( "CASE 3: returning %x\n", p); 
+			
 			#endif
 			liballoc_unlock();		// release the lock
 			return p;
@@ -480,9 +477,9 @@
 						p = (void*)((uintptr_t)min + sizeof( struct liballoc_minor ));
 						ALIGN( p );
 
-						#ifdef DEBUG
-						printf( "CASE 4.1: returning %x\n", p); 
-						FLUSH();
+						#ifdef LIBALLOC_DEBUG
+						debugf_debug( "CASE 4.1: returning %x\n", p); 
+						
 						#endif
 						liballoc_unlock();		// release the lock
 						return p;
@@ -522,9 +519,9 @@
 						ALIGN( p );
 
 
-						#ifdef DEBUG
-						printf( "CASE 4.2: returning %x\n", p); 
-						FLUSH();
+						#ifdef LIBALLOC_DEBUG
+						debugf_debug( "CASE 4.2: returning %x\n", p); 
+						
 						#endif
 						
 						liballoc_unlock();		// release the lock
@@ -543,9 +540,9 @@
 		// CASE 5: Block full! Ensure next block and loop.
 		if ( maj->next == NULL ) 
 		{
-			#ifdef DEBUG
-			printf( "CASE 5: block full\n");
-			FLUSH();
+			#ifdef LIBALLOC_DEBUG
+			debugf_debug( "CASE 5: block full\n");
+			
 			#endif
 
 			if ( startedBet == 1 )
@@ -571,14 +568,14 @@
 	
 	liballoc_unlock();		// release the lock
 
-	#ifdef DEBUG
-	printf( "All cases exhausted. No memory available.\n");
-	FLUSH();
+	#ifdef LIBALLOC_DEBUG
+	debugf_debug( "All cases exhausted. No memory available.\n");
+	
 	#endif
-	#if defined DEBUG || defined INFO
-	printf( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
+	#if defined LIBALLOC_DEBUG || defined INFO
+	debugf_debug( "liballoc: WARNING: PREFIX(malloc)( %i ) returning NULL.\n", size);
 	liballoc_dump();
-	FLUSH();
+	
 	#endif
 	return NULL;
 }
@@ -599,10 +596,10 @@
 	if ( ptr == NULL ) 
 	{
 		l_warningCount += 1;
-		#if defined DEBUG || defined INFO
-		printf( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
+		#if defined LIBALLOC_DEBUG || defined INFO
+		debugf_debug( "liballoc: WARNING: PREFIX(free)( NULL ) called from %x\n",
 							__builtin_return_address(0) );
-		FLUSH();
+		
 		#endif
 		return;
 	}
@@ -627,31 +624,31 @@
 		   )
 		{
 			l_possibleOverruns += 1;
-			#if defined DEBUG || defined INFO
-			printf( "liballoc: ERROR: Possible 1-3 byte overrun for magic %x != %x\n",
+			#if defined LIBALLOC_DEBUG || defined INFO
+			debugf_debug( "liballoc: ERROR: Possible 1-3 byte overrun for magic %x != %x\n",
 								min->magic,
 								LIBALLOC_MAGIC );
-			FLUSH();
+			
 			#endif
 		}
 						
 						
 		if ( min->magic == LIBALLOC_DEAD )
 		{
-			#if defined DEBUG || defined INFO
-			printf( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
+			#if defined LIBALLOC_DEBUG || defined INFO
+			debugf_debug( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
 									ptr,
 									__builtin_return_address(0) );
-			FLUSH();
+			
 			#endif
 		}
 		else
 		{
-			#if defined DEBUG || defined INFO
-			printf( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
+			#if defined LIBALLOC_DEBUG || defined INFO
+			debugf_debug( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
 								ptr,
 								__builtin_return_address(0) );
-			FLUSH();
+			
 			#endif
 		}
 			
@@ -660,11 +657,11 @@
 		return;
 	}
 
-	#ifdef DEBUG
-	printf( "liballoc: %x PREFIX(free)( %x ): ", 
+	#ifdef LIBALLOC_DEBUG
+	debugf_debug( "liballoc: %x PREFIX(free)( %x ): ", 
 				__builtin_return_address( 0 ),
 				ptr );
-	FLUSH();
+	
 	#endif
 	
 
@@ -708,9 +705,9 @@
 	}
 	
 
-	#ifdef DEBUG
-	printf( "OK\n");
-	FLUSH();
+	#ifdef LIBALLOC_DEBUG
+	debugf_debug( "OK\n");
+	
 	#endif
 	
 	liballoc_unlock();		// release the lock
@@ -773,31 +770,31 @@
 			   )
 			{
 				l_possibleOverruns += 1;
-				#if defined DEBUG || defined INFO
-				printf( "liballoc: ERROR: Possible 1-3 byte overrun for magic %x != %x\n",
+				#if defined LIBALLOC_DEBUG || defined INFO
+				debugf_debug( "liballoc: ERROR: Possible 1-3 byte overrun for magic %x != %x\n",
 									min->magic,
 									LIBALLOC_MAGIC );
-				FLUSH();
+				
 				#endif
 			}
 							
 							
 			if ( min->magic == LIBALLOC_DEAD )
 			{
-				#if defined DEBUG || defined INFO
-				printf( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
+				#if defined LIBALLOC_DEBUG || defined INFO
+				debugf_debug( "liballoc: ERROR: multiple PREFIX(free)() attempt on %x from %x.\n", 
 										ptr,
 										__builtin_return_address(0) );
-				FLUSH();
+				
 				#endif
 			}
 			else
 			{
-				#if defined DEBUG || defined INFO
-				printf( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
+				#if defined LIBALLOC_DEBUG || defined INFO
+				debugf_debug( "liballoc: ERROR: Bad PREFIX(free)( %x ) called from %x\n",
 									ptr,
 									__builtin_return_address(0) );
-				FLUSH();
+				
 				#endif
 			}
 			
